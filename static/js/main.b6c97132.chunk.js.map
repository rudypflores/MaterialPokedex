{"version":3,"sources":["util/PokeAPI.js","components/RenderPokemon.js","App.js","serviceWorker.js","index.js"],"names":["PokeAPI","search","query","ext","fetch","then","response","json","catch","e","console","log","data","types","length","img","sprites","front_default","name","type","ability","abilities","RenderPokemon","react_default","a","createElement","className","src","this","props","pokemon","alt","React","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","value","ready","renderPokemon","bind","assertThisInitialized","handleChange","handleSubmit","_this2","setState","event","target","toLowerCase","preventDefault","style","margin","components_RenderPokemon","onSubmit","onChange","required","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","registration","unregister"],"mappings":"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","file":"static/js/main.b6c97132.chunk.js","sourcesContent":["/*\r\n\tFetch API and receive berry name and size\r\n*/\r\nconst PokeAPI = {\r\n\tsearch(query, ext) {\r\n\t\treturn fetch(query + ext + \"/\")\r\n\t\t\t.then(response => {\r\n\t\t\t\treturn response.json();\r\n\t\t\t})\r\n\t\t\t.catch(e => {\r\n\t\t\t\tconsole.log(\"404 Request with PokeAPI has failed.\");\r\n\t\t\t\treturn e;\r\n\t\t\t})\r\n\t\t\t.then(data => {\r\n\t\t\t\t//Check for types\r\n\t\t\t\tif(data.types.length !== 1) { //if it has 2 types\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\timg: data.sprites.front_default,\r\n\t\t\t\t\t\tname: data.name,\r\n\t\t\t\t\t\ttype: data.types[0].type.name + \" \" + data.types[1].type.name,\r\n\t\t\t\t\t\tability: data.abilities[0].ability.name\r\n\t\t\t\t\t};\r\n\t\t\t\t} else { //if it has only one type\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\timg: data.sprites.front_default,\r\n\t\t\t\t\t\tname: data.name,\r\n\t\t\t\t\t\ttype: data.types[0].type.name,\r\n\t\t\t\t\t\tability: data.abilities[0].ability.name\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}).catch(e => {\r\n\t\t\t\t//Handle exception where typo is found\r\n\t\t\t\tconsole.log(\"Pokemon not found!\");\r\n\t\t\t\treturn null;\r\n\t\t\t});\r\n\t}\r\n}\r\nexport default PokeAPI;","import React from 'react';\r\nimport '../App.css';\r\n\r\nclass RenderPokemon extends React.Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t/*Render the Pokemon UI*/\r\n\t\t\t<div className=\"items\" >\r\n                <img src={this.props.pokemon.img} alt=\"sample sprite\" className=\"img\"/>\r\n                <p className=\"name ripple\">{this.props.pokemon.name}</p>\r\n                <p className=\"type ripple\">{this.props.pokemon.type}</p>\r\n                <p className=\"ability ripple\">ability: {this.props.pokemon.ability}</p>\r\n            </div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default RenderPokemon;","import React, { Component } from 'react';\nimport './App.css';\nimport PokeAPI from './util/PokeAPI';\nimport RenderPokemon from './components/RenderPokemon';\n\n\nclass App extends Component {\n\n   constructor(props) {\n      super(props);\n      this.state = {\n         pokemon : {},\n         value: '',\n         ready: false\n      };   \n      this.renderPokemon = this.renderPokemon.bind(this);\n      this.handleChange = this.handleChange.bind(this);\n      this.handleSubmit = this.handleSubmit.bind(this);\n   }\n\n   //Query for API and rendering\n   renderPokemon(query, ext) {\n      //Fetch API, wait until done. Then set state to values\n      PokeAPI.search(query, ext).then(pokemon => {\n         this.setState({pokemon : pokemon, ready: true});\n         return pokemon;\n      });      \n   }\n\n   //Set the value state to the user's input\n   handleChange(event) {\n      this.setState({value: event.target.value});\n   }\n\n   //We do something with that value state\n   handleSubmit(event) {\n      //Fetch API and change state\n      this.renderPokemon(\"https://pokeapi.co/api/v2/pokemon/\", this.state.value.toLowerCase());\n      event.preventDefault();\n   }\n\n   render() {\n      //Return JSX\n      return (\n         <div className=\"App\">\n            \n            {/*Title*/}\n            <h1 style={{margin:0}}><span className=\"pokedex-title\">Pokédex</span> <span className=\"react-title\">React</span></h1>\n            <h5 className=\"material\">Made with Material Design</h5>\n\n            {/*Check if the query+request was made and if so we render the UI*/}\n            {this.state.ready && this.state.pokemon ? <RenderPokemon pokemon={this.state.pokemon}/> : null}\n\n            {/*User query for pokemon generation*/}\n            <form onSubmit={this.handleSubmit}>\n               <div className=\"group\">\n                  <input type=\"text\" value={this.state.value} onChange={this.handleChange} required/>\n                  <span className=\"highlight\"></span>\n                  <span className=\"bar\"></span>\n                  <label>Pokémon</label>\n               </div>\n            </form>\n\n            {/*Copyright*/}\n            <p className=\"copyright\">Rudy Flores 2019</p>\n         </div>\n      );\n   }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}